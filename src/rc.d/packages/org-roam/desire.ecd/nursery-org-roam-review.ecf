;;; -*- mode: emacs-lisp; lexical-binding: t; coding: utf-8-unix; -*-
;;; Small org-roam packages
;;; https://github.com/chrisbarrett/nursery

;;; Extends org-roam with spaced-repetition review of nodes
;;; https://github.com/chrisbarrett/nursery/blob/main/lisp/org-roam-review.el

(desire 'org-drill)

;;; Provides commands to categorise and review org-roam nodes for Evergreen note-taking
(desire 'org-roam-review :recipe '(:fetcher github :repo "chrisbarrett/nursery" :branch "main" :files ("lisp/org-roam-review.el" "lisp/org-tags-filter.el" "lisp/plisty.el")))
(require 'org-roam-review)

;;; Tag all newly-created notes as seedlings.
(add-hook 'org-roam-capture-new-node-hook #'org-roam-review-set-seedling)

;;; Keybindings for applying Evergreen note properties
(define-key org-mode-map (kbd "C-c r r") #'("accept" . org-roam-review-accept))
(define-key org-mode-map (kbd "C-c r f") #'("forgot" . org-roam-review-forgot))
(define-key org-mode-map (kbd "C-c r u") #'("bury" . org-roam-review-bury))
(define-key org-mode-map (kbd "C-c r m") #'("set memorise" . org-roam-review-set-memorise))
(define-key org-mode-map (kbd "C-c r x") #'("set excluded" . org-roam-review-set-excluded))
(define-key org-mode-map (kbd "C-c r b") #'("set budding" . org-roam-review-set-budding))
(define-key org-mode-map (kbd "C-c r s") #'("set seedling" . org-roam-review-set-seedling))
(define-key org-mode-map (kbd "C-c r e") #'("set evergreen" . org-roam-review-set-evergreen))

;;; Ignore tags when export
(with-eval-after-load 'ox-hugo
  (add-to-list 'ecf/tags-categories-to-be-removed "seedling")
  (add-to-list 'ecf/tags-categories-to-be-removed "evergreen")
  (add-to-list 'ecf/tags-categories-to-be-removed "budding"))

;;; https://www.reddit.com/r/orgmode/comments/8166p9/can_orgexport_or_oxhugo_ignore_some_tags/
;; (with-eval-after-load 'ox-hugo
;;   (defun org-hugo--tag-processing-fn-remove-tags-maybe (tags-list info)
;;     "Remove user-specified tags/categories. See `org-hugo-tag-processing-functions' for more info."
;;     ;; Use tag/category string (including @ prefix) exactly as used in Org file.
;;     (let ((tags-categories-to-be-removed '("seedling" "evergreen" "budding"))) ;"my_tag" "@my_cat"
;;       (cl-remove-if (lambda (tag_or_cat)
;;                       (member tag_or_cat tags-categories-to-be-removed))
;;                     tags-list)))

;;   (add-to-list 'org-hugo-tag-processing-functions
;;                #'org-hugo--tag-processing-fn-remove-tags-maybe))


;;;
