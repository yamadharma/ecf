;;;; Supercharge your Org daily/weekly agenda by grouping items
;; https://github.com/alphapapa/org-super-agenda

(require 'org-super-agenda)

;; (org-super-agenda-mode)

;; (setq org-agenda-custom-commands
;;       '(("c" "Super view"
;;          ((agenda "" ((org-agenda-overriding-header "")
;;                       (org-super-agenda-groups
;;                        '((:name "Today"
;;                                 :time-grid t
;;                                 :date today
;;                                 :order 1)))))
;;           (alltodo "" ((org-agenda-overriding-header "")
;;                        (org-super-agenda-groups
;;                         '((:log t)
;;                           (:name "To refile"
;;                                  :file-path "refile\\.org")
;;                           (:name "Next to do"
;;                                  :todo "NEXT"
;;                                  :order 1)
;;                           (:name "Important"
;;                                  :priority "A"
;;                                  :order 6)
;;                           (:name "Today's tasks"
;;                                  :file-path "journal/")
;;                           (:name "Due Today"
;;                                  :deadline today
;;                                  :order 2)
;;                           (:name "Scheduled Soon"
;;                                  :scheduled future
;;                                  :order 8)
;;                           (:name "Overdue"
;;                                  :deadline past
;;                                  :order 7)
;;                           (:name "Meetings"
;;                                  :and (:todo "MEET" :scheduled future)
;;                                  :order 10)
;;                           (:discard (:not (:todo "TODO")))))))))))

(org-super-agenda-mode)


;; (let ((org-agenda-span 'day)
;;       (org-super-agenda-groups
;;        '((:name "Time grid items in all-uppercase with RosyBrown1 foreground"
;;                 :time-grid t
;;                 :transformer (--> it
;;                                   (upcase it)
;;                                   (propertize it 'face '(:foreground "RosyBrown1"))))
;;          (:name "Priority >= C items underlined, on black background"
;;                 :face (:background "black" :underline t)
;;                 :not (:priority>= "C")
;;                 :order 100))))
;;   (org-agenda nil "a"))

(let ((org-super-agenda-groups
       '((:log t)  ; Automatically named "Log"
         (:name "Schedule"
                :time-grid t)
         (:name "Today"
                :scheduled today)
         (:habit t)
         (:name "Due today"
                :deadline today)
         (:name "Overdue"
                :deadline past)
         (:name "Due soon"
                :deadline future)
         (:name "Unimportant"
                :todo ("SOMEDAY" "MAYBE" "CHECK" "TO-READ" "TO-WATCH")
                :order 100)
         (:name "Waiting..."
                :todo "WAITING"
                :order 98)
         (:name "Scheduled earlier"
                :scheduled past))))
  (org-agenda-list))

;; (let ((org-super-agenda-groups
;;        '(;; Each group has an implicit boolean OR operator between its selectors.
;;          (:name "Today"  ; Optionally specify section name
;;                 :time-grid t  ; Items that appear on the time grid
;;                 :todo "TODAY")  ; Items that have this TODO keyword
;;          (:name "Important"
;;                 ;; Single arguments given alone
;;                 :tag "bills"
;;                 :priority "A")
;;          ;; Set order of multiple groups at once
;;          (:order-multi (2 (:name "Shopping in town"
;;                                  ;; Boolean AND group matches items that match all subgroups
;;                                  :and (:tag "shopping" :tag "@town"))
;;                           (:name "Food-related"
;;                                  ;; Multiple args given in list with implicit OR
;;                                  :tag ("food" "dinner"))
;;                           (:name "Personal"
;;                                  :habit t
;;                                  :tag "personal")
;;                           (:name "Space-related (non-moon-or-planet-related)"
;;                                  ;; Regexps match case-insensitively on the entire entry
;;                                  :and (:regexp ("space" "NASA")
;;                                                ;; Boolean NOT also has implicit OR between selectors
;;                                                :not (:regexp "moon" :tag "planet")))))
;;          ;; Groups supply their own section names when none are given
;;          (:todo "WAITING" :order 8)  ; Set order of this section
;;          (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
;;                 ;; Show this group at the end of the agenda (since it has the
;;                 ;; highest number). If you specified this group last, items
;;                 ;; with these todo keywords that e.g. have priority A would be
;;                 ;; displayed in that group instead, because items are grouped
;;                 ;; out in the order the groups are listed.
;;                 :order 9)
;;          (:priority<= "B"
;;                       ;; Show this section after "Today" and "Important", because
;;                       ;; their order is unspecified, defaulting to 0. Sections
;;                       ;; are displayed lowest-number-first.
;;                       :order 1)
;;          ;; After the last group, the agenda will display items that didn't
;;          ;; match any of these groups, with the default order position of 99
;;          )))
;;   (org-agenda nil "a"))

;;;;
