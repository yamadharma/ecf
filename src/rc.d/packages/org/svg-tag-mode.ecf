;;; -*- mode: emacs-lisp; lexical-binding: t; coding: utf-8-unix; -*-
;; A minor mode for Emacs that replace keywords with nice SVG labels
;; https://github.com/rougier/svg-tag-mode

(desire 'svg-lib)
(require 'svg-lib)
(setq svg-lib-icons-dir (expand-file-name "svg-lib" home-cache-path))
(if (not (file-directory-p svg-lib-icons-dir))
    (make-directory svg-lib-icons-dir t))


(require 'svg-tag-mode)

(defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
(defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
;; (defconst day-re "[A-Za-z]\\{3\\}")
(defconst day-re "[:alpha:]\\{3\\}")
(defconst date-day-re (format "\\(%s\\)? ?\\(%s\\)?" date-re day-re))
(defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))

(defun svg-progress-percent (value)
  (svg-image (svg-lib-concat
	      (svg-lib-progress-bar
	       (/ (string-to-number value) 100.0) nil
	       :height 0.8 :background (doom-color 'fg)
	       :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
	      (svg-lib-tag (concat value "%") nil
			   :height 0.8 :background (doom-color 'bg)
			   :stroke 0 :margin 0)) :ascent 'center))

(defun svg-progress-count (value)
  (let* ((seq (mapcar #'string-to-number (split-string value "/")))
	 (count (float (car seq)))
	 (total (float (cadr seq))))
    (svg-image (svg-lib-concat
		(svg-lib-progress-bar (/ count total) nil
				      :background (doom-color 'bg) :height 0.8
				      :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
		(svg-lib-tag value nil
			     :background (doom-color 'bg)
			     :stroke 0 :margin 0 :height 0.8)) :ascent 'center)))

(set-face-attribute 'svg-tag-default-face nil :family "Iosevka")

(setq svg-tag-tags
      `(;;; Org tags
	;; ("\\(:[A-Za-z0-9_]+[ \-]:\\)" . ((lambda (tag) tag :beg 1 :end -1)))
	;; ("\\(:[A-Za-z0-9_]+:\\)" . ((lambda (tag) (svg-tag-make tag :beg 1 :end -1))))
	;; ("\\(:[A-Za-z0-9_]+[ \-]:\\)" . ((lambda (tag) tag :beg 1 :end -1)))

	;; (":\\([A-Za-z0-9_]+\\)" . ((lambda (tag) (svg-tag-make tag))))
	;; (":\\([A-Za-z0-9_]+[ \-]\\)" . ((lambda (tag) tag)))

		;;; Replaces any occurence of :XXX: with a dynamic SVG tag displaying XXX
	("\\(:[A-Za-z_-]+:\\)" . ((lambda (tag) (svg-tag-make tag :beg 1 :end -1))))
	
	;; Replaces any occurence of :TAG1:TAG2:â€¦:$ ($ means end of line) with a dynamic collection of SVG tags.
	;; ("\\(:[A-Za-z_-]+\\)" . ((lambda (tag)
	;; 			    (svg-tag-make tag :beg 1))))
	;; ("\\(:[A-Za-z_-]+:\\)$" . ((lambda (tag)
	;; 			      (svg-tag-make tag :beg 1 :end -1))))

	;; Progress e.g. [63%] or [10/15]
	("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
					    (svg-progress-percent (substring tag 1 -2)))))
	("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
					  (svg-progress-count (substring tag 1 -1)))))

	;; Task priority e.g. [#A], [#B], or [#C]
	("\\[#A\\]" . ((lambda (tag) (svg-tag-make tag :face 'error :inverse t
						   :beg 2 :end -1 :margin 0 :radius 10))))
	("\\[#B\\]" . ((lambda (tag) (svg-tag-make tag :face 'warning :inverse t
						   :beg 2 :end -1 :margin 0 :radius 10))))
	("\\[#C\\]" . ((lambda (tag) (svg-tag-make tag :face 'org-todo :inverse t
						   :beg 2 :end -1 :margin 0 :radius 10))))

	;; TODO / DONE
	("TODO" . ((lambda (tag) (svg-tag-make tag :inverse t :face 'org-todo))))
	("HOLD" . ((lambda (tag) (svg-tag-make tag :face 'org-todo))))
	("DONE\\|STOP" . ((lambda (tag) (svg-tag-make tag :inverse t :face 'org-done))))
	("NEXT\\|WAITING" . ((lambda (tag) (svg-tag-make tag :inverse t :face '+org-todo-active))))
	("STARTED" . ((lambda (tag) (svg-tag-make tag :inverse t :face '+org-todo-active))))
	("REPEAT\\|EVENT\\|PROJ\\|IDEA" .
	 ((lambda (tag) (svg-tag-make tag :inverse t :face '+org-todo-project))))
	("REVIEW" . ((lambda (tag) (svg-tag-make tag :inverse t :face '+org-todo-onhold))))

	;; ;; Active date (without day name, with or without time)
	(,(format "\\(<%s>\\)" date-re) .
	 ((lambda (tag)
	    (svg-tag-make tag :beg 1 :end -1 :margin 0))))
	(,(format "\\(<%s>\\)" date-day-re) .
	 ((lambda (tag)
	    (svg-tag-make tag :beg 1 :end -1 :margin 0))))
	(,(format "\\(<%s *\\)%s>" date-re time-re) .
	 ((lambda (tag)
	    (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))
	(,(format "\\(<%s *\\)%s>" date-re time-re) .
	 ((lambda (tag)
	    (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))
	(,(format "<%s *\\(%s>\\)" date-re time-re) .
	 ((lambda (tag)
	    (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0))))

	;; Inactive date  (without day name, with or without time)
	(,(format "\\(\\[%s\\]\\)" date-re) .
	 ((lambda (tag)
	    (svg-tag-make tag :beg 1 :end -1 :margin 0 :face 'org-date))))
	(,(format "\\(\\[%s\\]\\)" date-day-re) .
	 ((lambda (tag)
	    (svg-tag-make tag :beg 1 :end -1 :margin 0 :face 'org-date))))
	(,(format "\\(\\[%s *\\)%s\\]" date-re time-re) .
	  ((lambda (tag)
	     (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face 'org-date))))
	 (,(format "\\[%s *\\(%s\\]\\)" date-re time-re) .
	  ((lambda (tag)
	     (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face 'org-date))))


	 ;; Citation of the form [cite:@Knuth:1984]
	 ("\\(\\[cite:@[A-Za-z]+:\\)" . ((lambda (tag)
					   (svg-tag-make tag
							 :inverse t
							 :beg 7 :end -1
							 :crop-right t))))
	 ("\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)" . ((lambda (tag)
						    (svg-tag-make tag
								  :end -1
								  :crop-left t))))
	 ))

;;; Render SVG tags in org-agenda
(defun org-agenda-show-svg ()
  (let* ((case-fold-search nil)
	 (keywords (mapcar #'svg-tag--build-keywords svg-tag--active-tags))
	 (keyword (car keywords)))
    (while keyword
      (save-excursion
	(while (re-search-forward (nth 0 keyword) nil t)
	  (overlay-put (make-overlay
			(match-beginning 0) (match-end 0))
		       'display  (nth 3 (eval (nth 2 keyword)))) ))
      (pop keywords)
      (setq keyword (car keywords)))))
(add-hook 'org-agenda-finalize-hook #'org-agenda-show-svg)

;;; Add hook
(add-hook 'org-mode-hook #'svg-tag-mode)

;; (global-svg-tag-mode t)

;;;
