;;; -*- mode: emacs-lisp; lexical-binding: t; coding: utf-8-unix; -*-
;;; Refile depends on provider

;; For Google-based accounts it will trash the inbox copy, leaving the other copy in All Mail folder intact, effectively archiving it. For
;; other email accounts, it will move the message to the refile maildir, marking it as seen and not new. This way, you can
;;; just press =r= on a list of messages and they will be archived correctly.

(setf (alist-get 'refile mu4e-marks)
      '(:char ("r" . "▶")
              :prompt "refile"
              :dyn-target (lambda (target msg) (mu4e-get-refile-folder msg))
              :action (lambda (docid msg target)
                        (let ((maildir (mu4e-message-field msg :maildir)))
                          (if (string-match-p "@gmail.com\\|@sci.pfu.edu.ru" maildir)
                              (mu4e--server-remove docid)
                            (mu4e--server-move docid (mu4e--mark-check-target target) "+S-u-N"))))))


;;; Trash without trashed flag
;; This code at least for Google, if you flag a message trashed, it just disappears.
;; This code instead flags the message as seen, removes the flags unseen and new and finally, moves it to the Trash folder, which is synced to the server and gets deleted according to a policy you control.

(setf (alist-get 'trash mu4e-marks)
      '(:char ("d" . "▼")
              :prompt "dtrash"
              :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
              ;; Here's the main difference to the regular trash mark, no +T
              ;; before -N so the message is not marked as IMAP-deleted:
              :action (lambda (docid msg target)
                        (mu4e--server-move docid (mu4e--mark-check-target target) "+S-u-N"))))

;;;

