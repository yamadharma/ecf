;;; -*- mode: emacs-lisp; lexical-binding: t; coding: utf-8-unix; -*-
;;; OrgMsg is a GNU/Emacs global minor mode mixing up Org mode and Message mode to compose and reply to emails in a Outlook HTML friendly style
;;; https://github.com/jeremy-compostella/org-msg

(require 'org-msg)

(setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t tex:dvipng"
      org-msg-startup "hidestars indent inlineimages"
      org-msg-greeting-name-limit 3
      org-msg-default-alternatives '((new . (utf-8 html))
                                     (reply-to-text . (utf-8 html))
                                     (reply-to-html . (utf-8 html)))
      org-msg-convert-citation t
      ;; The default attachment matcher gives too many false positives,
      ;; it's better to be more conservative. See https://regex101.com/r/EtaiSP/4.
      org-msg-attached-file-reference
      "see[ \t\n]\\(?:the[ \t\n]\\)?\\(?:\\w+[ \t\n]\\)\\{0,3\\}\\(?:attached\\|enclosed\\)\\|\
(\\(?:attached\\|enclosed\\))\\|\
\\(?:attached\\|enclosed\\)[ \t\n]\\(?:for\\|is\\)[ \t\n]")

(setq org-msg-greeting-fmt "\nHi%s,\n\n")

(setq mu4e-compose-signature-auto-include nil)
(setq org-msg-signature "
Kind regards,
#+begin_signature
--
Dmitry S. Kulyabov
#+end_signature")

(org-msg-mode)

;;; Fix for mu-12.0.0

(defun org-msg-edit-mode-mu4e ()
  "Setup mu4e faces, addresses completion and run mu4e."
  (mu4e--compose-remap-faces)
  (unless (mu4e-running-p)
    (if (fboundp #'mu4e~start) (mu4e~start) (mu4e--start)))
  (when mu4e-compose-complete-addresses
    (mu4e--compose-setup-completion))
  ;; the following code is verbatim from mu4e-compose.el, `mu4e-compose-mode'
  ;; this will setup fcc (saving sent messages) and handle flags
  ;; (e.g. replied to)
  (add-hook 'message-send-hook
	    (if (functionp #'mu4e~setup-fcc-message-sent-hook-fn)
		#'mu4e~setup-fcc-message-sent-hook-fn
	      (lambda ()
		;; when in-reply-to was removed, remove references as well.
		(when (eq mu4e-compose-type 'reply)
		  (mu4e~remove-refs-maybe))
		(when use-hard-newlines
		  (mu4e-send-harden-newlines))
		;; for safety, always save the draft before sending
		(set-buffer-modified-p t)
		(save-buffer)
		(mu4e--compose-setup-fcc-maybe)
		(widen)))
	    nil t)
  ;; when the message has been sent.
  (add-hook 'message-sent-hook
	    (if (functionp #'mu4e~set-sent-handler-message-sent-hook-fn)
		#'mu4e~set-sent-handler-message-sent-hook-fn
	      (lambda ()
		(setq mu4e-sent-func 'mu4e-sent-handler)
		(mu4e~proc-sent (buffer-file-name))))
	    nil t))
  
;;;
