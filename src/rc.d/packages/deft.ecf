;;; -*- mode: emacs-lisp; lexical-binding: t; coding: utf-8-unix; -*-
;;; Deft for Emacs
;; https://github.com/jrblevin/deft

;; Deft is a major mode for browsing and filtering notes written in plain text formats, such as org-mode, markdown, and LaTeX.
;; To use this module, in your config file set the value of the variable deft-directory to the folder in which you want to keep your notes.
;; The default note format is org-mode. You can change this by setting the value of the variable deft-default-extension. Changing the value to ~”md”~ for example, will change the default note format to markdown.

(require 'deft)

;;(setq deft-extensions '("md" "txt" "text" "markdown" "org"))
(add-to-list 'deft-extensions "tex")
(setq deft-default-extension "org")
(setq deft-text-mode 'org-mode)
(setq deft-directory org-roam-directory)

(setq deft-auto-save-interval 0)
;;; disable auto-save
;; (setq deft-auto-save-interval -1.0)



;; Enable searching for files in subdirectories
(setq deft-recursive t)

;;; Global keyboard binding for Deft
(global-set-key (kbd "C-c n D") 'deft)

(global-set-key (kbd "C-x C-g") 'deft-find-file)

;; For compatibility with other applications which use the filename as the title of a note
;; (setq deft-use-filename-as-title t)

;;; When non-nil, automatically generated titles in new org-mode files will be prefixed with #+TITLE:
(setq deft-org-mode-title-prefix t)

;;; New filenames will be generated from the filter string and processed according to the rules
;;; By default, slashes are removed and replaced by hyphens
(setq deft-use-filter-string-for-filename t)

;;; Converts the filter string into a readable file-name using kebab-case:
;; (setq deft-file-naming-rules
;;     '((noslash . "-")
;;       (nospace . "-")
;;       (case-fn . downcase)))

;;; Setting the maximum number of files to list in the Deft browser
(setq deft-file-limit 50)

;;; For org-roam compatibility
(defun ecf/deft-parse-title (file contents)
  "Parse the given FILE and CONTENTS and determine the title.
  If `deft-use-filename-as-title' is nil, the title is taken to
  be the first non-empty line of the FILE.  Else the base name of the FILE is
  used as title."
  (let ((begin (string-match "^#\\+[tT][iI][tT][lL][eE]: .*$" contents)))
    (if begin
	(string-trim (substring contents begin (match-end 0)) "#\\+[tT][iI][tT][lL][eE]: *" "[\n\t ]+")
      (deft-base-filename file))))

(advice-add 'deft-parse-title :override #'ecf/deft-parse-title)

(setq deft-strip-summary-regexp
      (concat "\\("
	      "[\n\t]" ;; blank
	      "\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
	      "\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n"
	      "\\|^:LOCALSETUP:\n\\(.+\n\\)+:END:\n"
	      "\\|^:SETUP_EXPORT:\n\\(.+\n\\)+:END:\n"	      
	      "\\|^:SETUP_LOCAL:\n\\(.+\n\\)+:END:\n"
	      "\\|^:SETUP_HUGO:\n\\(.+\n\\)+:END:\n"
	      "\\|^#\\+begin_export hugo\n\\(.+\n\\)+#\\+end_export\n"
	      "\\|^@@hugo:\\(.+\n\\)+@@\n"
	      "\\)"))

;;;
